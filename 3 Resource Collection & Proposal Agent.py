from langchain_openai import OpenAI  # Correct import for langchain-openai
from langchain.agents import initialize_agent  # Import agent initialization
from langchain.agents import Tool
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Access the OpenAI API key from environment variables
api_key = os.getenv('openAI_api_key')

# Define a tool, for example, a simple search tool (you can add more complex ones)
def search_tool(query: str):
    return f"Search results for {query}"  # Mocked search function

# Create a list of tools (you can add real tools like web search, etc.)
tools = [
    Tool(
        name="Search",
        func=search_tool,
        description="This tool searches for relevant information."
    )
]

class ResourceCollectionAgent:
    def __init__(self, llm, tools):
        # Initialize the agent with the tools and LLM
        self.agent = initialize_agent(
            tools=tools,
            llm=llm,
            agent_type="zero-shot-react-description",  # Agent type for zero-shot reasoning
            verbose=True  # Set to True for debugging
        )

    def find_relevant_resources(self, use_cases):
        """
        Collects relevant datasets and resources for given use cases.

        Args:
            use_cases: A list of AI/ML use cases.

        Returns:
            A dictionary mapping use cases to lists of resource links.
        """
        resources = {}
        for use_case in use_cases:
            prompt = f"Find relevant datasets and resources (e.g., libraries, tools, articles) for the following AI/ML use case: \n\n{use_case}\n\n" \
                     "Search on platforms like Kaggle, Hugging Face, GitHub, and Google Scholar. " \
                     "Provide links to the most relevant resources."

            # Use the agent to generate a response
            response = self.agent.run(prompt)
            resource_links = response.strip().splitlines()
            resources[use_case] = resource_links
        return resources

class SolutionProposalAgent:
    def __init__(self, llm, tools):
        # Initialize the agent with the tools and LLM
        self.agent = initialize_agent(
            tools=tools,
            llm=llm,
            agent_type="zero-shot-react-description",  # Agent type for zero-shot reasoning
            verbose=True
        )

    def propose_genai_solutions(self, use_cases, company_summary):
        """
        Identifies and proposes GenAI solutions for given use cases.

        Args:
            use_cases: A list of AI/ML use cases.
            company_summary: A summary of the company, its industry, and key information.

        Returns:
            A list of proposed GenAI solutions.
        """
        prompt = f"Based on the following company summary and AI/ML use cases, propose specific GenAI solutions: \n\n" \
                 f"**Company Summary:**\n{company_summary}\n\n" \
                 f"**Use Cases:**\n{'\n'.join(use_cases)}\n\n" \
                 "Consider solutions like document search, automated report generation, AI-powered chat systems, and other relevant applications. " \
                 "Explain how each solution can benefit the company."

        # Use the agent to generate a response
        response = self.agent.run(prompt)
        genai_solutions = response.strip().splitlines()
        return genai_solutions

# Initialize the OpenAI LLM with the API key
llm = OpenAI(openai_api_key=api_key)  # Replace with your OpenAI API key

# Initialize agents
resource_collection_agent = ResourceCollectionAgent(llm, tools)
solution_proposal_agent = SolutionProposalAgent(llm, tools)

# Example use cases (generated by another agent or provided as input)
use_cases = [
    "Develop a chatbot for customer support.",
    "Implement predictive maintenance for manufacturing equipment.",
    "Personalize product recommendations for online shoppers.",
]

# Example company summary (replace with actual company data)
company_summary = """
Tesla is an American electric vehicle and clean energy company. 
Founded in 2003, Tesla designs and manufactures electric vehicles, battery energy storage from home to grid-scale, 
solar panels and solar roof tiles, and related products and services. 
Tesla's mission is to accelerate the world's transition to sustainable energy. 
"""

# Collect relevant resources for the use cases
resources = resource_collection_agent.find_relevant_resources(use_cases)

# Propose GenAI solutions based on the use cases and company summary
genai_solutions = solution_proposal_agent.propose_genai_solutions(use_cases, company_summary)

# Output the collected resources
print("Collected Resources:")
for use_case, links in resources.items():
    print(f"\n**{use_case}**")
    for link in links:
        print(f"- {link}")

# Output the proposed GenAI solutions
print("\nProposed GenAI Solutions:")
for solution in genai_solutions:
    print(f"- {solution}")


#Output
"""
Finished chain.
Collected Resources:

**Develop a chatbot for customer support.**
- The most relevant resources for developing a chatbot for customer support can be found on Kaggle,
 Hugging Face, GitHub, and Google Scholar by searching for "chatbot development for customer support" 
 and refining the search with additional keywords such as "dataset," "resource," "articles," and "libraries."

**Implement predictive maintenance for manufacturing equipment.**
- Some of the most relevant resources for this AI/ML use case are:
- 1. Kaggle Dataset: Predictive Maintenance for Manufacturing Dataset 
(https://www.kaggle.com/eemlcommunity/predictive-maintenance)
- 2. GitHub Repository: Predictive Maintenance for Manufacturing Equipment 
(https://github.com/IBM/predictive-maintenance-for-manufacturing)
- 3. Hugging Face Model: Predictive Maintenance Transformer 
(https://huggingface.co/models?search=predictive+maintenance)
- 4. Google Scholar Article: "A Data-Driven Approach for Predictive Maintenance in Manufacturing" 
(https://scholar.google.com/scholar?q=predictive+maintenance+for+manufacturing+equipment+AI/ML+use+case&hl=en&as_sdt=0&as_vis=1&oi=scholart)

**Personalize product recommendations for online shoppers.**
- The final answer to my original input question is the set of relevant resources and datasets 
identified through my thorough search process, including Kaggle's "Online Retail" dataset, Hugging Face's "Transformers" library,
 GitHub's "Recommenders" project, and Google Scholar's article on "Personalized Product Recommendations using Machine Learning".

Proposed GenAI Solutions:
- Based on the company summary and AI/ML use cases, I propose the following GenAI solutions for Tesla: 
implementing a chatbot for customer support, implementing predictive maintenance for manufacturing equipment,
 and personalizing product recommendations for online shoppers. These solutions can benefit the company by improving 
 customer support efficiency, reducing downtime and maintenance costs, and increasing sales.


"""
